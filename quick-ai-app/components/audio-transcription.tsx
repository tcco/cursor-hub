"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/H2wh9vZFc6A
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

export function AudioTranscription() {
  const [file, setFile] = useState<File | null>(null);
  const [transcription, setTranscription] = useState<string>("");
  const [isLoading, setIsLoading] = useState(false);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setFile(event.target.files[0]);
    }
  };

  const handleTranscribe = async () => {
    if (!file) return;

    setIsLoading(true);
    const formData = new FormData();
    formData.append("audio", file);

    try {
      console.log("Sending request to /api/transcribe");
      const response = await fetch("/api/transcribe", {
        method: "POST",
        body: formData,
      });

      console.log("Response status:", response.status);
      const responseText = await response.text();
      console.log("Response text:", responseText);

      if (!response.ok) {
        throw new Error(`Transcription failed: ${response.statusText}`);
      }

      const data = JSON.parse(responseText);
      setTranscription(data.transcription);
    } catch (error) {
      console.error("Error:", error);
      setTranscription("Transcription failed. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="grid w-full max-w-4xl grid-cols-1 gap-8 md:grid-cols-2">
      <div className="flex flex-col items-center justify-center gap-4 rounded-lg border border-input bg-background p-8 shadow-sm">
        <div className="flex flex-col items-center justify-center gap-2">
          <UploadIcon className="h-12 w-12 text-primary" />
          <h3 className="text-xl font-medium">Upload Audio File</h3>
          <p className="text-muted-foreground">
            Select your audio file to transcribe.
          </p>
        </div>
        <Input
          type="file"
          id="audio-file"
          className="w-full"
          onChange={handleFileChange}
          accept="audio/*"
        />
        <Button
          type="button"
          className="w-full"
          onClick={handleTranscribe}
          disabled={!file || isLoading}
        >
          {isLoading ? "Transcribing..." : "Transcribe Audio"}
        </Button>
      </div>
      <div className="flex flex-col items-center justify-center gap-4 rounded-lg border border-input bg-background p-8 shadow-sm">
        <div className="flex flex-col items-center justify-center gap-2">
          <FileTextIcon className="h-12 w-12 text-primary" />
          <h3 className="text-xl font-medium">Transcription</h3>
          <p className="text-muted-foreground">
            Your transcription will be displayed here.
          </p>
        </div>
        <div className="h-[400px] w-full overflow-auto rounded-md border border-input p-4">
          <p>
            {transcription ||
              "Transcription will appear here after processing."}
          </p>
        </div>
      </div>
      {isLoading && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <div className="flex flex-col items-center justify-center gap-4">
            <div className="h-12 w-12 animate-spin text-primary" />
            <p className="text-white">Transcribing audio, please wait...</p>
          </div>
        </div>
      )}
    </div>
  );
}

function FileTextIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10 9H8" />
      <path d="M16 13H8" />
      <path d="M16 17H8" />
    </svg>
  );
}

function UploadIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="17 8 12 3 7 8" />
      <line x1="12" x2="12" y1="3" y2="15" />
    </svg>
  );
}
